Index: src/cs3500/animator/Oval.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cs3500.animator;\r\n\r\nimport java.awt.Color;\r\nimport java.awt.geom.Point2D.Double;\r\n\r\npublic class Oval extends Shape {\r\n\r\n  public Oval(Double pos, double h, double w, Color color, int order)\r\n      throws NullPointerException, IllegalArgumentException {\r\n    super(pos, h, w, color, order);\r\n  }\r\n\r\n  @Override\r\n  public void render() {\r\n\r\n  }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/cs3500/animator/Oval.java b/src/cs3500/animator/Oval.java
--- a/src/cs3500/animator/Oval.java	(revision a1735bc0f926817d5171598026a9397916a2655d)
+++ b/src/cs3500/animator/Oval.java	(date 1615503128878)
@@ -1,6 +1,7 @@
 package cs3500.animator;
 
 import java.awt.Color;
+import java.awt.geom.Point2D;
 import java.awt.geom.Point2D.Double;
 
 public class Oval extends Shape {
@@ -15,4 +16,18 @@
 
   }
 
+  @Override
+  public void changePos(int pos) {
+
+  }
+
+  @Override
+  public void changeSize(int size) {
+
+  }
+
+  @Override
+  public int getPriority() {
+    return 0;
+  }
 }
Index: src/cs3500/animator/Shape.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cs3500.animator;\r\n\r\nimport java.awt.Color;\r\nimport java.awt.geom.Point2D.Double;\r\nimport java.util.Objects;\r\n\r\n/**\r\n * Abstract Class that all eligible shapes will be created from.\r\n */\r\npublic abstract class Shape implements IShape {\r\n\r\n  protected Double position;\r\n  protected double[] dimensions;\r\n  protected Color color;\r\n  protected final int order;\r\n\r\n  /**\r\n   * Abstract Shape Constructor.\r\n   *\r\n   * @param pos   The spawn position of the Shape\r\n   * @param x     Dimension one of Two\r\n   * @param y     Dimension two of Two\r\n   * @param color The color of the Shape\r\n   * @param order The order priority number of the Shape\r\n   * @throws NullPointerException     A NullPointerException is thrown when a null Object argument\r\n   *                                  is provided\r\n   * @throws IllegalArgumentException An IllegalArgumentException is thrown when the arguments are\r\n   *                                  invalid\r\n   */\r\n  public Shape(Double pos, double x, double y, Color color, int order)\r\n      throws NullPointerException, IllegalArgumentException {\r\n    Objects.requireNonNull(pos);\r\n    Objects.requireNonNull(color);\r\n\r\n    if (x < 0 || y < 0 || order < 0) {\r\n      throw new IllegalArgumentException(\"Primitive constructor elements must not be non negative\");\r\n    }\r\n\r\n    // TODO: Figure out how to implement Order\r\n\r\n    this.position = new Double(pos.getX(), pos.getY());\r\n    this.dimensions = new double[]{x, y};\r\n    this.color = new Color(color.getRGB());\r\n    this.order = order;\r\n  }\r\n\r\n  public void render() {\r\n\r\n  }\r\n\r\n  public void changePosition(Double pos) throws NullPointerException {\r\n    Objects.requireNonNull(pos);\r\n    this.position = new Double(pos.getX(), pos.getY());\r\n  }\r\n\r\n  public Double getPosition() {\r\n    return this.position;\r\n  }\r\n\r\n  public void changeSize(double[] size) throws NullPointerException {\r\n    Objects.requireNonNull(size);\r\n    this.dimensions = new double[]{size[0], size[1]};\r\n  }\r\n\r\n  public double[] getSize(){\r\n    return this.dimensions;\r\n  }\r\n\r\n  public void changeColor(Color c) throws NullPointerException{\r\n    Objects.requireNonNull(c);\r\n    this.color = c;\r\n  }\r\n\r\n  public Color getColor(){\r\n    return this.color;\r\n  }\r\n\r\n  public int getPriority() {\r\n    return this.order;\r\n  }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/cs3500/animator/Shape.java b/src/cs3500/animator/Shape.java
--- a/src/cs3500/animator/Shape.java	(revision a1735bc0f926817d5171598026a9397916a2655d)
+++ b/src/cs3500/animator/Shape.java	(date 1615503128879)
@@ -1,82 +1,32 @@
 package cs3500.animator;
 
+
 import java.awt.Color;
 import java.awt.geom.Point2D.Double;
 import java.util.Objects;
 
-/**
- * Abstract Class that all eligible shapes will be created from.
- */
 public abstract class Shape implements IShape {
 
-  protected Double position;
-  protected double[] dimensions;
-  protected Color color;
+  protected final Double position;
+  protected final double[] diamentions;
+  protected final Color color;
   protected final int order;
 
-  /**
-   * Abstract Shape Constructor.
-   *
-   * @param pos   The spawn position of the Shape
-   * @param x     Dimension one of Two
-   * @param y     Dimension two of Two
-   * @param color The color of the Shape
-   * @param order The order priority number of the Shape
-   * @throws NullPointerException     A NullPointerException is thrown when a null Object argument
-   *                                  is provided
-   * @throws IllegalArgumentException An IllegalArgumentException is thrown when the arguments are
-   *                                  invalid
-   */
-  public Shape(Double pos, double x, double y, Color color, int order)
-      throws NullPointerException, IllegalArgumentException {
+  public Shape(Double pos, double h, double w, Color color, int order) throws NullPointerException, IllegalArgumentException {
     Objects.requireNonNull(pos);
     Objects.requireNonNull(color);
-
-    if (x < 0 || y < 0 || order < 0) {
-      throw new IllegalArgumentException("Primitive constructor elements must not be non negative");
+    if (h < 0 || h < 0) {
+      throw new IllegalArgumentException("The diamentions cannot be less than zero");
     }
-
-    // TODO: Figure out how to implement Order
-
+    if (order < 0) {
+      //ToDO figure out how to implement order
+    }
     this.position = new Double(pos.getX(), pos.getY());
-    this.dimensions = new double[]{x, y};
+    diamentions = new double[]{h, w};
     this.color = new Color(color.getRGB());
     this.order = order;
   }
 
-  public void render() {
-
-  }
-
-  public void changePosition(Double pos) throws NullPointerException {
-    Objects.requireNonNull(pos);
-    this.position = new Double(pos.getX(), pos.getY());
-  }
-
-  public Double getPosition() {
-    return this.position;
-  }
 
-  public void changeSize(double[] size) throws NullPointerException {
-    Objects.requireNonNull(size);
-    this.dimensions = new double[]{size[0], size[1]};
-  }
-
-  public double[] getSize(){
-    return this.dimensions;
-  }
-
-  public void changeColor(Color c) throws NullPointerException{
-    Objects.requireNonNull(c);
-    this.color = c;
-  }
-
-  public Color getColor(){
-    return this.color;
-  }
-
-  public int getPriority() {
-    return this.order;
-  }
 
 }
Index: src/cs3500/animator/IShape.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cs3500.animator;\r\n\r\nimport java.awt.Color;\r\nimport java.awt.geom.Point2D.Double;\r\n\r\npublic interface IShape {\r\n\r\n  void render();\r\n\r\n  /**\r\n   * Changes the position of the same to the provided position\r\n   * @param pos the position the shape will move to\r\n   */\r\n  void changePosition(Double pos) throws NullPointerException;\r\n\r\n  /**\r\n   * Getter to obtain the position of the shape\r\n   * @return Point2D.Double representing the position\r\n   */\r\n  Double getPosition();\r\n\r\n  /**\r\n   * Changes the current size of the shape\r\n   * @param size A two element array representing the new dimensions of the shape\r\n   */\r\n  void changeSize(double[] size) throws NullPointerException;\r\n\r\n  /**\r\n   * Getter to obtain the size dimensions of the shape\r\n   * @return A two element array representing the dimensions of the shape\r\n   */\r\n  double[] getSize();\r\n\r\n  /**\r\n   * Changes the current color of the shape to the provided color\r\n   * @param c New color of shape\r\n   */\r\n  void changeColor(Color c) throws NullPointerException;\r\n\r\n  /**\r\n   * Getter for the current shape color\r\n   * @return current shape color\r\n   */\r\n  Color getColor();\r\n\r\n  /**\r\n   * Getter for the Overlap priority of the shape\r\n   * @return unique integer\r\n   */\r\n  int getPriority();\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/cs3500/animator/IShape.java b/src/cs3500/animator/IShape.java
--- a/src/cs3500/animator/IShape.java	(revision a1735bc0f926817d5171598026a9397916a2655d)
+++ b/src/cs3500/animator/IShape.java	(date 1615503128877)
@@ -1,52 +1,12 @@
 package cs3500.animator;
 
-import java.awt.Color;
-import java.awt.geom.Point2D.Double;
-
 public interface IShape {
 
   void render();
 
-  /**
-   * Changes the position of the same to the provided position
-   * @param pos the position the shape will move to
-   */
-  void changePosition(Double pos) throws NullPointerException;
-
-  /**
-   * Getter to obtain the position of the shape
-   * @return Point2D.Double representing the position
-   */
-  Double getPosition();
-
-  /**
-   * Changes the current size of the shape
-   * @param size A two element array representing the new dimensions of the shape
-   */
-  void changeSize(double[] size) throws NullPointerException;
-
-  /**
-   * Getter to obtain the size dimensions of the shape
-   * @return A two element array representing the dimensions of the shape
-   */
-  double[] getSize();
+  void changePos(int pos);
 
-  /**
-   * Changes the current color of the shape to the provided color
-   * @param c New color of shape
-   */
-  void changeColor(Color c) throws NullPointerException;
+  void changeSize(int size);
 
-  /**
-   * Getter for the current shape color
-   * @return current shape color
-   */
-  Color getColor();
-
-  /**
-   * Getter for the Overlap priority of the shape
-   * @return unique integer
-   */
   int getPriority();
-
 }
